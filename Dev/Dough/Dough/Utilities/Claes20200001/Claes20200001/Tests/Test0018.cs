using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using System.Numerics;
using Charlotte.Commons;
using Charlotte.Utilities;

namespace Charlotte.Tests
{
	/// <summary>
	/// MillerRabinTester テスト
	/// </summary>
	public class Test0018
	{
		public void Test01()
		{
			for (int n = -30000; n <= 30000; n++)
			{
				bool ans1 = Test01_a1(n);
				bool ans2 = Test01_a2(n);

				if (ans1 != ans2)
					throw null;
			}
			ProcMain.WriteLog("OK! (TEST-0018-01)");
		}

		private bool Test01_a1(int n)
		{
			return MillerRabinTester.IsProbablePrime(n);
		}

		private bool Test01_a2(int n)
		{
			if (n < 2)
				return false;

			if (n == 2)
				return true;

			if (n % 2 == 0)
				return false;

			for (int d = 3; d * d <= n; d += 2)
				if (n % d == 0)
					return false;

			return true;
		}

		// ====

		public void Test02()
		{
			string RES_BIG_PRIMES = @"

345171570260461450792131917359
905830603842026502687610500391
339661018218263282468551767019
210228985843312006223933750641
474408815133232131017276187041
238864271211444134574585599509
387494079530768040659543625217
674375887234556833902326284147
449692934180956421193126503317
683780610293665304318432261359
821806272933533798555260603873
908272281982595331965073385793
786408824226504464630685722741
768472972164182698920193802471
893908818564031432372120593073
707420748246494435399524079717
362646092822307928221108195193
631579876438346047581406677323
580675247320672410993779488507
854359911712923490086418743689
751545099261180090624023709659
457985634010595524667620791023
854261150078537494660989062981
513934201983658689422823258403
317615160225995292294423773063
777534059958971906902250115793
635379118468502534960306257327
188651134205240264871815243827
942559733407280174485354672069
493170411908601395137876478909

4969079171442122994687766844484804794671
8756189136206915595728450244709541812151
9451967349735473679404261386517702131913
2331056656784934164404186993624186772951
5374111903538717743954091085307014213217
5728430035741959333247477583216902840007
5931322263317451677549457171555534043063
7018317663971231962919954009214685167481
1014878090565481621322701964057882592041
4356356533044265875148523225102434697251
5783608204525694282292796794174542373751
8448614822862101217976602904487972419753
2228916341966434082586639796155847671637
6310628394197275546282459332977629167341
3816934778318426323642285875456070450649
1914525780348818456691341044198143865759
9372479918217853856891852383294465019107
6405461603960844278496174321801170213653
7494218551449109565194355348418358923679
1078769057257983301352391373403996622049

77721621595101925123569939516054984256409183927741
22779387434895850108104537839872222531154820688949
36038352369012692919585566014919860888177873392017
77509441380579701535453173810589877949821091748293
87265670759210142129927657959062991601496682286377
82502821684098839265066332787002344646812465843711
34143288449880443242984083235155949185493652869559
91366094455238565733465448535156389804171178933667
53624346375293479568777421565431878877379655202017
21456099664205722646332642467412946185997796236321

536487643951605651346332491727787977771532550738198684762309
170308948946012637389956892618834398950978810232981891718473
531991262577416190994081823115623625814906355996325478774819
451540376214227975894224079454683833566401389995489503851927
930678287653781577479156453382884124553764095956048724363407

8687887524482847557178791777656187505054905079784653789000687962501603
3734946777657616377670880622421533529987722789394981724803064747768713
5285850659933032838054372267794624036808275182711251720791938882108577
2839249295714458932681687457796038847377240928719100060568923023252069
5393339440588576538082633211888375489215677910772358845048801394773877

19621758287322150227091807345013216708056312174896734889678068943678089875159209
35310450208515305161803358898075294537937549174647620394183274384055795012635967
34221225148301449904237904693086967612573291800948027238287133386475516355237069
79948108084979385107326371334027010683284108942728652621775472922476301750580133
88310425564341303127202052878976556276992919236518716867740807253343354539071949

411082296727696188526883528756277583087107883570818065031491624866976004200727283007010949
790802755704422592365853148058872240880421911381439902248094738836342484221380934583763457
643665724733723732975973689410652868508726035766732552349744084190605469840106083767719021
919241107279898337955367715890001991667510414112570803234035310982496303305244329467628523
836283274610080481955071717610219225577836861563374469408394717940143456560301002490989789

5504566846763518429891596528928672777560835202113839142153778470220659557026045964005567310825593351
1041730977006956230511854611330242600844552271847021673021283566758319563154037544861607576623074363
8100714410106412430238176317527475962964251480308360041087290598541785401549941346201341468274412511
6430191318974453509836958505900667440495341735536562726595034948237534497644165453999590314494583783
4777233364707208101990405898372564118727824374912174642396593324509580849939620630711869201823533339

";

			BigInteger[] bigPrimes = SCommon.TextToLines(RES_BIG_PRIMES)
				.Select(line => line.Trim())
				.Where(line => line != "")
				.Select(line => BigInteger.Parse(line))
				.ToArray();

			ProcMain.WriteLog("TEST-0018-02");

			foreach (BigInteger bigPrime in bigPrimes)
				if (!MillerRabinTester.IsProbablePrime(bigPrime))
					throw new Exception(bigPrime.ToString());

			ProcMain.WriteLog("OK");

			foreach (BigInteger bigPrime in bigPrimes)
				foreach (int smallNumber in Enumerable.Range(2, 300))
					if (MillerRabinTester.IsProbablePrime(bigPrime * smallNumber))
						throw new Exception(bigPrime + ", " + smallNumber);

			ProcMain.WriteLog("OK");

			foreach (BigInteger bigPrime1 in bigPrimes)
				foreach (BigInteger bigPrime2 in bigPrimes)
					if (MillerRabinTester.IsProbablePrime(bigPrime1 * bigPrime2))
						throw new Exception(bigPrime1 + ", " + bigPrime2);

			ProcMain.WriteLog("OK!");
		}
	}
}
